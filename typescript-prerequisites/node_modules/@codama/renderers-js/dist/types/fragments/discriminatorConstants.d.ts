import { ConstantDiscriminatorNode, DiscriminatorNode, FieldDiscriminatorNode, InstructionArgumentNode, StructFieldTypeNode } from '@codama/nodes';
import { Fragment, RenderScope } from '../utils';
export declare function getDiscriminatorConstantsFragment(scope: Pick<RenderScope, 'nameApi' | 'typeManifestVisitor'> & {
    discriminatorNodes: DiscriminatorNode[];
    fields: InstructionArgumentNode[] | StructFieldTypeNode[];
    prefix: string;
}): Fragment;
export declare function getDiscriminatorConstantFragment(discriminatorNode: DiscriminatorNode, scope: Pick<RenderScope, 'nameApi' | 'typeManifestVisitor'> & {
    discriminatorNodes: DiscriminatorNode[];
    fields: InstructionArgumentNode[] | StructFieldTypeNode[];
    prefix: string;
}): Fragment | null;
export declare function getConstantDiscriminatorConstantFragment(discriminatorNode: ConstantDiscriminatorNode, scope: Pick<RenderScope, 'nameApi' | 'typeManifestVisitor'> & {
    discriminatorNodes: DiscriminatorNode[];
    prefix: string;
}): Fragment | null;
export declare function getFieldDiscriminatorConstantFragment(discriminatorNode: FieldDiscriminatorNode, scope: Pick<RenderScope, 'nameApi' | 'typeManifestVisitor'> & {
    fields: InstructionArgumentNode[] | StructFieldTypeNode[];
    prefix: string;
}): Fragment | null;
//# sourceMappingURL=discriminatorConstants.d.ts.map