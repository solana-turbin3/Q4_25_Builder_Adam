import { NodeKind } from '@codama/nodes';
import { Visitor } from '@codama/visitors-core';
import { BaseFragment } from './fragment';
import { Path } from './path';
export type RenderMap = ReadonlyMap<Path, string>;
export declare function createRenderMap(): RenderMap;
export declare function createRenderMap(path: Path, content: BaseFragment | string): RenderMap;
export declare function createRenderMap(entries: Record<Path, BaseFragment | string | undefined>): RenderMap;
export declare function addToRenderMap(renderMap: RenderMap, path: Path, content: BaseFragment | string): RenderMap;
export declare function removeFromRenderMap(renderMap: RenderMap, path: Path): RenderMap;
export declare function mergeRenderMaps(renderMaps: RenderMap[]): RenderMap;
export declare function mapRenderMapContent(renderMap: RenderMap, fn: (content: string) => string): RenderMap;
export declare function mapRenderMapContentAsync(renderMap: RenderMap, fn: (content: string) => Promise<string>): Promise<RenderMap>;
export declare function getFromRenderMap(renderMap: RenderMap, path: Path): string;
export declare function renderMapContains(renderMap: RenderMap, path: Path, value: RegExp | string): boolean;
export declare function writeRenderMap(renderMap: RenderMap, basePath: Path): void;
export declare function writeRenderMapVisitor<TNodeKind extends NodeKind = NodeKind>(visitor: Visitor<RenderMap, TNodeKind>, basePath: Path): Visitor<void, TNodeKind>;
//# sourceMappingURL=renderMap.d.ts.map